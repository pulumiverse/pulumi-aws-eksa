// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Cluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-eksa:metal:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The IP address of the admin server
     */
    public /*out*/ readonly adminIp!: pulumi.Output<string>;
    /**
     * The private SSH key to connect to the nodes
     */
    public /*out*/ readonly privateSshKey!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.metro === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metro'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["controlPlaneCount"] = (args ? args.controlPlaneCount : undefined) ?? 1;
            resourceInputs["controlPlaneDeviceType"] = (args ? args.controlPlaneDeviceType : undefined) ?? "m3.small.x86";
            resourceInputs["dataPlaneCount"] = (args ? args.dataPlaneCount : undefined) ?? 1;
            resourceInputs["dataPlaneDeviceType"] = (args ? args.dataPlaneDeviceType : undefined) ?? "m3.small.x86";
            resourceInputs["metro"] = args ? args.metro : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["adminIp"] = undefined /*out*/;
            resourceInputs["privateSshKey"] = undefined /*out*/;
        } else {
            resourceInputs["adminIp"] = undefined /*out*/;
            resourceInputs["privateSshKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The name of your EKSA Metal Cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * The number of control plane nodes. Set to 3 or 5 for a highly available setup
     */
    controlPlaneCount?: number;
    /**
     * Device type for the control plane nodes
     */
    controlPlaneDeviceType?: pulumi.Input<string>;
    /**
     * The number of data plane nodes
     */
    dataPlaneCount?: number;
    /**
     * Device type for the data plane nodes
     */
    dataPlaneDeviceType?: pulumi.Input<string>;
    /**
     * The metro to deploy this cluster to
     */
    metro: pulumi.Input<string>;
    /**
     * The project to deploy this cluster to
     */
    projectId: pulumi.Input<string>;
}
